####################################
#             Imports              # 
####################################

using CategoricalArrays
using Clustering
using Distributions
using FillArrays
using LinearAlgebra
using Random: AbstractRNG, GLOBAL_RNG, randperm
using RDatasets
using Statistics
using StatsBase

include("utilities.jl")

####################################
#             Abstract             #
####################################

abstract type AbstractMixtureModel end

struct KMeans <: AbstractMixtureModel end

struct GMM <: AbstractMixtureModel end

####################################
#             KMeans               #
####################################

Œ∏_KMeans = Matrix{Float64}
r_KMeans = Vector{Int}

function init_Œ∏(
    ::KMeans, 
    rng::AbstractRNG, 
    x::Matrix{Float64}, 
    k::Int
)::Œ∏_KMeans

    n = size(x)[1]
    rand_ids = randperm(rng, n)[1:k]
    Œº = x[rand_ids, :]
    Œ∏ = Œº
    return Œ∏
end

function e_step(alg::KMeans, x::Matrix{Float64}, Œ∏::Œ∏_KMeans)::r_KMeans
    Œº = Œ∏
    mapslices(x·µ¢ -> compute_r(alg, x·µ¢, Œº), x; dims = 2)[:]
end

function compute_r(::KMeans, x·µ¢::Vector{Float64}, Œº::Matrix{Float64})::Int
    mapslices(Œº·µ¢ -> norm(Œº·µ¢ - x·µ¢), Œº; dims = 2)[:] |> argmin
end

function m_step(
    ::KMeans,
    x::Matrix{Float64},
    r::Vector{Int},
    Œ∏::Œ∏_KMeans
)::Œ∏_KMeans

    Œº = Œ∏
    k = size(Œº)[1]
    r_inds = [findall(equals(r·µ¢), r) for r·µ¢ in 1:k]
    new_Œº_vecs = [
        !isempty(inds) ? mean(x[inds, :], dims = 1)[:] : Œº[i, :] 
        for (i, inds) in enumerate(r_inds)
            ]
    new_Œº_matrix = permutedims(hcat(new_Œº_vecs...))
    Œ∏ = new_Œº_matrix
    return Œ∏
end

####################################
#             GMM                  #
####################################

Œ∏_GMM = Tuple{Vector{Float64}, Vector{MvNormal}} # Œ†, MvNormal
r_GMM = Matrix{Float64}

function init_Œ∏(
    ::GMM, 
    rng::AbstractRNG, 
    x::Matrix{Float64}, 
    k::Int
)::Œ∏_GMM

    N, D = size(x)
    Œº_inds = randperm(rng, N)[1:k]
    Œ† = ones(k) / k
    ùìù = [MvNormal(x[Œº_ind, :], I(D))  for Œº_ind in Œº_inds]
    Œ∏ = (Œ†, ùìù)
    return Œ∏
end

function e_step(alg::GMM, x::Matrix{Float64}, Œ∏::Œ∏_GMM)::r_GMM
    Œ†, ùìù = Œ∏
    K = length(Œ†)
    r = mapslices(x·µ¢ -> compute_r(alg, x·µ¢, Œ†, ùìù, K), x; dims = 2)
    return r
end

function compute_r(
    ::GMM,
    x·µ¢::Vector{Float64}, 
    Œ†::Vector{Float64}, 
    ùìù::Vector{MvNormal}, 
    K::Int
)::Vector{Float64}

    r = [Œ†[k] * pdf(ùìù[k], x·µ¢) for k in 1:K]
    return r /= sum(r)
end

function m_step(
    ::GMM, 
    x::Matrix{Float64}, 
    r::Matrix{Float64}, 
    Œ∏::Œ∏_GMM
)::Œ∏_GMM

    Œ†, _ = Œ∏
    K = length(Œ†)
    N, D = size(x)
    N‚Çñ = [sum([r[n, k] for n in 1:N]) for k in 1:K]
    new_Œº = compute_new_Œº(x, r, N, D, K, N‚Çñ)
    new_Œ£ = compute_new_Œ£(x, new_Œº, r, N, K, N‚Çñ)
    new_Œ† = compute_new_Œ†(N, N‚Çñ)
    new_ùìù = [MvNormal(new_Œº[k, :], new_Œ£[k]) for k in 1:K]
    new_Œ∏ = (new_Œ†, new_ùìù)
    return new_Œ∏
end

#TODO: functionalize
function compute_new_Œº(
    x::Matrix{Float64}, 
    r::Matrix{Float64}, 
    N::Int, 
    D::Int, 
    K::Int, 
    N‚Çñ::Vector{Float64}
)::Matrix{Float64}

    new_Œº = zeros(K, D)
    for k in 1:K
        new_Œº‚Çñ = [r[n, k] * x[n, :] for n in 1:N]
        new_Œº[k, :] = sum(permutedims(hcat(new_Œº‚Çñ...)), dims=1) / N‚Çñ[k]
    end
    return new_Œº
end

function compute_new_Œ£(
    x::Matrix{Float64}, 
    new_Œº::Matrix{Float64}, 
    r::Matrix{Float64}, 
    N::Int, 
    K::Int, 
    N‚Çñ::Vector{Float64}
)::Vector{Matrix{Float64}}

    new_Œ£::Vector{Matrix{Float64}} = []
    for k in 1:K
        new_Œ£‚Çñ = Hermitian(sum([r[n, k] * (x[n, :] - new_Œº[k, :]) * transpose(x[n, :] - new_Œº[k, :])  #TODO: tranpose with '
                                for n in 1:N]) / N‚Çñ[k])
        push!(new_Œ£, new_Œ£‚Çñ)
    end
    return new_Œ£

end

function compute_new_Œ†(N::Int, N‚Çñ::Vector{Float64})::Vector{Float64}
    [N‚Çñ[k] / N for k in 1:length(N‚Çñ)]
end

####################################
#             Generic EM           #
####################################

function em(
    alg::AbstractMixtureModel, 
    x::Matrix{Float64};
    k::Int=3,
    n_steps::Int=10
)::Tuple{Vector, Vector}

    Œ∏ = init_Œ∏(alg, GLOBAL_RNG, x, k)
    r_history = []
    Œ∏_history = []
    for step in 1:n_steps
        r = e_step(alg, x, Œ∏)
        Œ∏ = m_step(alg, x, r, Œ∏)
        push!(r_history, r)
        push!(Œ∏_history, Œ∏)
    end

    return Œ∏_history, r_history
end
